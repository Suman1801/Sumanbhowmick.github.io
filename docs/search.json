[
  {
    "objectID": "docs/python-projects/road-network/Visualizing Road Networks.html",
    "href": "docs/python-projects/road-network/Visualizing Road Networks.html",
    "title": "Step 1: Define cities (Indian metros)",
    "section": "",
    "text": "!pip install osmnx networkx geopandas matplotlib folium\n\nimport osmnx as ox\nimport networkx as nx\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport folium\n\nRequirement already satisfied: osmnx in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (2.0.5)\nRequirement already satisfied: networkx in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (3.5)\nRequirement already satisfied: geopandas in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (1.1.1)\nRequirement already satisfied: matplotlib in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (3.10.3)\nRequirement already satisfied: folium in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (0.20.0)\nRequirement already satisfied: numpy&gt;=1.22 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from osmnx) (2.3.2)\nRequirement already satisfied: pandas&gt;=1.4 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from osmnx) (2.3.1)\nRequirement already satisfied: requests&gt;=2.27 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from osmnx) (2.32.4)\nRequirement already satisfied: shapely&gt;=2.0 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from osmnx) (2.1.1)\nRequirement already satisfied: pyogrio&gt;=0.7.2 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from geopandas) (0.11.0)\nRequirement already satisfied: packaging in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from geopandas) (25.0)\nRequirement already satisfied: pyproj&gt;=3.5.0 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from geopandas) (3.7.1)\nRequirement already satisfied: contourpy&gt;=1.0.1 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from matplotlib) (1.3.3)\nRequirement already satisfied: cycler&gt;=0.10 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from matplotlib) (0.12.1)\nRequirement already satisfied: fonttools&gt;=4.22.0 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from matplotlib) (4.59.0)\nRequirement already satisfied: kiwisolver&gt;=1.3.1 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from matplotlib) (1.4.8)\nRequirement already satisfied: pillow&gt;=8 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from matplotlib) (11.3.0)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from matplotlib) (3.2.3)\nRequirement already satisfied: python-dateutil&gt;=2.7 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from matplotlib) (2.9.0.post0)\nRequirement already satisfied: branca&gt;=0.6.0 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from folium) (0.8.1)\nRequirement already satisfied: jinja2&gt;=2.9 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from folium) (3.1.6)\nRequirement already satisfied: xyzservices in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from folium) (2025.4.0)\nRequirement already satisfied: MarkupSafe&gt;=2.0 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from jinja2&gt;=2.9-&gt;folium) (3.0.2)\nRequirement already satisfied: pytz&gt;=2020.1 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from pandas&gt;=1.4-&gt;osmnx) (2025.2)\nRequirement already satisfied: tzdata&gt;=2022.7 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from pandas&gt;=1.4-&gt;osmnx) (2025.2)\nRequirement already satisfied: certifi in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from pyogrio&gt;=0.7.2-&gt;geopandas) (2025.7.14)\nRequirement already satisfied: six&gt;=1.5 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib) (1.17.0)\nRequirement already satisfied: charset_normalizer&lt;4,&gt;=2 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from requests&gt;=2.27-&gt;osmnx) (3.4.2)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from requests&gt;=2.27-&gt;osmnx) (3.10)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in c:\\users\\suman\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from requests&gt;=2.27-&gt;osmnx) (2.5.0)\n\n\n\ncities = [\n    'Delhi, India', \n    'Mumbai, India', \n    'Kolkata, India', \n    'Chennai, India'\n]\n\n\nStep 2: Download and plot admin boundaries\n\nf, ax = plt.subplots(2, 2, figsize=(12, 10))\nindicies = [(i, j) for i in range(2) for j in range(2)]\ncities_admins = {}\n\nfor idx, city in enumerate(cities):\n    bx = ax[indicies[idx]]\n    admin = ox.geocode_to_gdf(city)\n    admin.plot(ax=bx)\n    bx.set_title(city)\n    cities_admins[city] = admin\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\nStep 3: Download road networks for each city\n\ncity_graphs = {}\ncity_edges = {}\ncity_nodes = {}\nfor city, admin in cities_admins.items():\n    G = ox.graph_from_polygon(admin.geometry.iloc[0], network_type='drive')\n    nodes, edges = ox.graph_to_gdfs(G)\n    print(f\"{city} - Nodes: {len(nodes)}, Edges: {len(edges)}\")\n    city_graphs[city] = G\n    city_edges[city] = edges\n    city_nodes[city] = nodes\n\nDelhi, India - Nodes: 183041, Edges: 498337\nMumbai, India - Nodes: 18710, Edges: 43036\nKolkata, India - Nodes: 35672, Edges: 90918\nChennai, India - Nodes: 52752, Edges: 132948\n\n\n\n\nStep 4: Quick visual preview of road networks\n\nf, ax = plt.subplots(2, 2, figsize=(12, 10))\nfor idx, (city, edges) in enumerate(city_edges.items()):\n    bx = ax[indicies[idx]]\n    edges.plot(ax=bx, linewidth=0.3)\n    bx.axis('off')\n    bx.set_title(city)\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\nStep 5: Colorized plots (neon aesthetic with background and spacing fixes)\n\ncolor_palette = [\n    {\"Neon\": \"#ff0099\",  \"Background\": \"#2e002e\"},\n    {\"Neon\": \"#00ff00\",  \"Background\": \"#003300\"},\n    {\"Neon\": \"#00ccff\",  \"Background\": \"#002233\"},\n    {\"Neon\": \"#ffff00\",  \"Background\": \"#333300\"}\n]\n\nfor idx, (city, edges) in enumerate(city_edges.items()):   \n    neon = color_palette[idx]['Neon']\n    bg = color_palette[idx]['Background']\n\n    f, ax = plt.subplots(figsize=(12, 12), facecolor=bg)\n    edges.plot(ax=ax, color=neon, linewidth=0.5, alpha=0.9)\n    ax.set_facecolor(bg)\n\n    # Remove ticks and spines\n    ax.set_xticks([])\n    ax.set_yticks([])\n    for spine in ax.spines.values():\n        spine.set_visible(False)\n\n    # Adjust title positioning\n    ymin, ymax = ax.get_ylim()\n    extension = 0.1 * (ymax - ymin)\n    ax.set_ylim(ymin, ymax + extension)\n    ax.set_title(city, fontsize=20, color=neon, y=0.95)\n    ax.axis('off')\n    plt.tight_layout()\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStep 6: Define city names and query boundaries\n\ncities = ['Delhi', 'Mumbai', 'Chennai', 'Kolkata']\ncity_graphs = {}\ncity_boundaries = {}\n\nfor city in cities:\n    # Get boundary polygon and street graph\n    gdf = ox.geocode_to_gdf(city)\n    city_boundaries[city] = gdf\n    graph = ox.graph_from_place(city, network_type='drive')\n    city_graphs[city] = graph\n\n\n\nStep 7: Compute Road Network Metrics\n\nprojected_crs = \"EPSG:32643\"  # UTM zone for India (approx.)\nmetrics = []\n\nfor city in cities:\n    G = city_graphs[city]\n    boundary = city_boundaries[city]\n\n    # Project the graph and boundary for accurate length/area calculation\n    G_proj = ox.project_graph(G, to_crs=projected_crs)\n    boundary_proj = boundary.to_crs(projected_crs)\n\n    # Compute total area (in mÂ²) of the boundary polygon\n    total_area = boundary_proj.geometry.area.iloc[0]  # assuming one polygon\n\n    # Compute basic graph statistics\n    stats = ox.basic_stats(G_proj, clean_int_tol=15)\n\n    # Build metrics row\n    metrics.append({\n        'City': city,\n        'Total Street Length (km)': round(stats['edge_length_total'] / 1000, 2),\n        'Street Density (km/kmÂ²)': round((stats['edge_length_total'] / 1000) / (total_area / 1e6), 2),\n        'Intersection Density (/kmÂ²)': round(stats['intersection_count'] / (total_area / 1e6), 2),\n        'Avg Streets per Node': round(stats.get('streets_per_node_avg', 0.0), 2),\n    })\n\n\n\nStep 8: Display metrics\n\nmetrics_df = pd.DataFrame(metrics)\n\nprint(\"\\nðŸ“Š Network Metrics Summary:\")\ndisplay(metrics_df)\n\n\nðŸ“Š Network Metrics Summary:\n\n\n\n\n\n\n\n\n\nCity\nTotal Street Length (km)\nStreet Density (km/kmÂ²)\nIntersection Density (/kmÂ²)\nAvg Streets per Node\n\n\n\n\n0\nDelhi\n32879.51\n22.25\n104.94\n2.87\n\n\n1\nMumbai\n4520.59\n11.63\n38.06\n2.76\n\n\n2\nChennai\n9366.40\n28.60\n124.88\n2.67\n\n\n3\nKolkata\n5737.24\n29.96\n146.52\n2.66\n\n\n\n\n\n\n\n\nimport os\nimport matplotlib.pyplot as plt\n\n# Make sure output folder exists\noutput_folder = \"D:/suman-portfolio/python-projects/Road Network/exports\"\nos.makedirs(output_folder, exist_ok=True)\n\ncolor_palette = [\n    {\"Neon\": \"#ff0099\",  \"Background\": \"#2e002e\"},\n    {\"Neon\": \"#00ff00\",  \"Background\": \"#003300\"},\n    {\"Neon\": \"#00ccff\",  \"Background\": \"#002233\"},\n    {\"Neon\": \"#ffff00\",  \"Background\": \"#333300\"}\n]\n\nfor idx, (city, edges) in enumerate(city_edges.items()):   \n    neon = color_palette[idx]['Neon']\n    bg = color_palette[idx]['Background']\n\n    fig, ax = plt.subplots(figsize=(12, 12), facecolor=bg)\n    edges.plot(ax=ax, color=neon, linewidth=0.5, alpha=0.9)\n    ax.set_facecolor(bg)\n\n    # Remove ticks and spines\n    ax.set_xticks([])\n    ax.set_yticks([])\n    for spine in ax.spines.values():\n        spine.set_visible(False)\n\n    # Adjust title positioning\n    ymin, ymax = ax.get_ylim()\n    extension = 0.1 * (ymax - ymin)\n    ax.set_ylim(ymin, ymax + extension)\n    ax.set_title(city, fontsize=20, color=neon, y=0.95)\n    ax.axis('off')\n    plt.tight_layout()\n\n    # Save image to file\n    filename = os.path.join(output_folder, f\"{city.replace(' ', '_')}_network.png\")\n    plt.savefig(filename, dpi=300, bbox_inches='tight', facecolor=bg)\n    plt.close(fig)  # Close figure to free memory"
  }
]